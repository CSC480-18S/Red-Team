{"version":3,"sources":["board.js"],"names":["row","column","tileSlotNumber","currentTileCount","firstTimeGeneratedTiles","ws","WebSocket","removeForError","error","this","data","$","remove","dataUpdate","response","isTurn","colored","score","goldScore","latestData","gold","greenScore","green","boardUpdate","board","console","log","username","name","tileSlots","generateTiles","tiles","playTime","document","getElementById","disabled","i","tile","swal","title","text","icon","button","currentPlayTileAmount","j","square","hasChildNodes","id","letter","value","tileValue","highlightedColor","undefined","visibility","svg","createElementNS","setAttribute","rect","appendChild","textContent","text2","tilesOnBoardValueAndPosition","push","tileLetter","xAxis","yAxis","gameOver","length","t","removeChild","firstChild","pop","selectedTileId","invalidPlay","hasTile","time","onopen","event","send","JSON","stringify","client","onmessage","mes","parse","scores","map","player","index","join","winningTeam","winner","gameEvent","action","innerHTML","selectedTileParentId","selectedSquareId","rows","generateTableRows","squares","generateSquares","tilesOnBoard","selectedTileCopyId","currentRoundtileIdsOnBoard","tableRows","isSquareGreen","isSquareYellow","squareBackgroundColor","k","tilesToGenerate","drag","ev","dataTransfer","setData","target","allowDrop","preventDefault","drop","getData","isDoubleScore","doubleScoreGameBoardBlocks","accumulator","scoreUnit","selectAndDeselectTile","tileId","isDisable","wrapper","parentNode","className","parentId","putTileInSquare","squareId","selectedSquare","children","cln","cloneNode","childTile","getAttribute","swap","grey","shuffle","sort","Math","random","emitBoard","array","Array","x","y","play","helpFunction","help","sentence"],"mappings":"AAAA,IAAIA,IAAM,GACNC,OAAS,GACTC,eAAiB,EACjBC,iBAAmBD,eAAiB,EACpCE,2BAGJ,IAAIC,GAAK,IAAIC,UAAU,uBAmDvB,SAASC,eAAeC,GACtBC,KAAKC,KAAKF,MAAQA,EAClBG,EAAE,cAAcC,SAIlB,SAASC,WAAWC,GAelB,GAdAL,KAAKC,KAAKK,OAASD,EAASC,OACvBD,EAASC,SACZN,KAAKC,KAAKM,SAAU,GAEtBP,KAAKC,KAAKO,MAAQH,EAASG,MAC3BR,KAAKC,KAAKQ,UAAYJ,EAASK,WAAWC,KAC1CX,KAAKC,KAAKW,WAAaP,EAASK,WAAWG,MAE3CC,YAAYT,EAASK,WAAWK,OAEhCC,QAAQC,IAAI,+BACZD,QAAQC,IAAIZ,GACZL,KAAKC,KAAKiB,SAAWb,EAASc,KAC9BnB,KAAKC,KAAKmB,UAAYC,cAAchB,EAASiB,QACrB,IAApBjB,EAASC,OAAkB,CAC7BN,KAAKC,KAAKsB,SAAW,wBACrBC,SAASC,eAAe,WAAWC,UAAW,EAC9CF,SAASC,eAAe,YAAYC,UAAW,EAC/CF,SAASC,eAAe,cAAcC,UAAW,EACjD,IAAK,IAAIC,EAAI,EAAGA,EAAIlC,eAAgBkC,IAClC3B,KAAKC,KAAKmB,UAAUO,GAAGC,KAAKF,UAAW,MAEpC,CACLG,MACEC,MAAO,kBACPC,KAAM,+BACNC,KAAM,OACNC,OAAQ,QAEVjC,KAAKC,KAAKsB,SAAW,kBACrBC,SAASC,eAAe,WAAWC,UAAW,EAC9CF,SAASC,eAAe,YAAYC,UAAW,EAC/CF,SAASC,eAAe,cAAcC,UAAW,EACjD,IAASC,EAAI,EAAGA,EAAIlC,eAAgBkC,IAClC3B,KAAKC,KAAKmB,UAAUO,GAAGC,KAAKF,UAAW,GAM7C,SAASZ,YAAYC,GAEnB,IADAf,KAAKC,KAAKiC,sBAAwB,EAC7BP,EAAI,EAAGA,EAAIpC,IAAKoC,IACnB,IAAKQ,EAAI,EAAGA,EAAI3C,OAAQ2C,IAAK,CAC3B,IAAIC,EAASZ,SAASC,eAAe,UAAYE,EAAI,IAAMQ,GAC3D,IAAKC,EAAOC,iBACU,OAAhBtB,EAAMY,GAAGQ,GAAa,CACxB,IAAIP,GACFU,GAAI,iBAAmBvB,EAAMY,GAAGQ,GAChCI,OAAQxB,EAAMY,GAAGQ,GACjBK,MAAOC,UAAU1B,EAAMY,GAAGQ,IAC1BO,sBAAkBC,EAClBC,WAAY,WAGVC,EAAMrB,SAASsB,gBAAgB,6BAA8B,OACjED,EAAIE,aAAa,KAAMnB,EAAKU,IAC5BO,EAAIE,aAAa,aAAc,WAC/B,IAAIC,EAAOxB,SAASsB,gBAAgB,6BAA8B,QAClEE,EAAKD,aAAa,IAAK,GACvBC,EAAKD,aAAa,IAAK,GACvBC,EAAKD,aAAa,SAAU,SAC5BC,EAAKD,aAAa,eAAgB,OAClCC,EAAKD,aAAa,QAAS,QAC3BC,EAAKD,aAAa,SAAU,QAC5BC,EAAKD,aAAa,OAAQ,WAC1BF,EAAII,YAAYD,GAChB,IAAIjB,EAAOP,SAASsB,gBAAgB,6BAA8B,QAClEf,EAAKgB,aAAa,IAAK,OACvBhB,EAAKgB,aAAa,IAAK,OACvBhB,EAAKgB,aAAa,qBAAsB,UACxChB,EAAKgB,aAAa,cAAe,UACjChB,EAAKgB,aAAa,YAAQJ,GAC1BZ,EAAKmB,YAActB,EAAKW,OACxBM,EAAII,YAAYlB,GAChB,IAAIoB,EAAQ3B,SAASsB,gBAAgB,6BAA8B,QACnEK,EAAMJ,aAAa,IAAK,OACxBI,EAAMJ,aAAa,IAAK,OACxBI,EAAMJ,aAAa,YAAQJ,GAC3BQ,EAAMJ,aAAa,QAAS,gBAC5BI,EAAMD,YAActB,EAAKY,MACzBK,EAAII,YAAYE,GAChBf,EAAOa,YAAYJ,GAEnB7C,KAAKC,KAAKmD,6BAA6BC,MAAMC,WAAY1B,EAAKW,OAC5DgB,MAAO5B,EACP6B,MAAOrB,MAQnB,SAASsB,SAASpD,GAChB,IAAK,IAAIsB,EAAI3B,KAAKC,KAAKmD,6BAA6BM,OAAS,EAAG/B,GAAK,EAAGA,IAAK,CAC3E,IAAIgC,EAAI3D,KAAKC,KAAKmD,6BAA6BzB,GAE3CS,EAASZ,SAASC,eAAe,UAAYkC,EAAEJ,MAAQ,IAAMI,EAAEH,OACnEpB,EAAOwB,YAAYxB,EAAOyB,YAC1B7D,KAAKC,KAAKmD,6BAA6BU,MAGzC9D,KAAKC,KAAK8D,eAAiB,GAC3B,IAAK,IAAIpC,EAAI,EAAGA,EAAIlC,eAAgBkC,IAClC3B,KAAKC,KAAKmB,UAAUO,GAAGC,KAAKc,iBAAmB,UAKnD,SAASsB,cACP,IAAK,IAAIrC,EAAI,EAAGA,EAAI3B,KAAKC,KAAKiC,sBAAuBP,IAAK,CACxD,IAAIgC,EAAI3D,KAAKC,KAAKmD,6BAA6BpD,KAAKC,KAAKmD,6BAA6BM,OAAS,GAE/F,QAASf,GAALgB,EAAgB,CAClB,IAAIvB,EAASZ,SAASC,eAAe,UAAYkC,EAAEJ,MAAQ,IAAMI,EAAEH,OACnExD,KAAKC,KAAKmD,6BAA6BU,MACvC1B,EAAOwB,YAAYxB,EAAOyB,aAG9B7D,KAAKC,KAAK8D,eAAiB,GAC3B,IAAK,IAAIpC,EAAI,EAAGA,EAAIlC,eAAgBkC,IAClC3B,KAAKC,KAAKmB,UAAUO,GAAGC,KAAKc,iBAAmB,UAGjD1C,KAAKC,KAAKiC,sBAAwB,EAElC,IAAK,IAAIP,EAAI,EAAGA,EAAI3B,KAAKC,KAAKmB,UAAUsC,OAAQ/B,IAC9C3B,KAAKC,KAAKmB,UAAUO,GAAGsC,SAAU,EACjCjE,KAAKC,KAAKmB,UAAUO,GAAGC,KAAKgB,WAAa,UAI7C,SAASrB,SAAS2C,GAChBlE,KAAKC,KAAKsB,SAAW,cAAgB2C,EAEnClE,KAAKC,KAAKM,QADR2D,EAAO,GAAM,EAhMnBtE,GAAGuE,OAAS,SAASC,GAGnBxE,GAAGyE,KAAKC,KAAKC,WADEH,MAAO,SAAUnE,MAAQuE,OAAQ,SAGhD5E,GAAG6E,UAAY,SAASL,GAEtB,IAAIM,EAAMJ,KAAKK,MAAMP,EAAMnE,MAE3B,OADAe,QAAQC,IAAIyD,EAAIN,OACRM,EAAIN,OACV,IAAK,eACHtE,eAAe4E,EAAIzE,KAAKF,OACxB,MACF,IAAK,WACH,IAAI6E,EAASF,EAAIzE,KAAK2E,OAAOC,IAAI,CAACC,EAAQC,OAC9BA,EAAQ,MAAMD,EAAO3D,iBAAiB2D,EAAOtE,WAGzDqB,MACEC,MAAO,aACPC,QAAS6C,EAAOI,KAAK,gCACLN,EAAIzE,KAAKgF,oCACfP,EAAIzE,KAAKiF,SACnBlD,KAAM,UACNC,OAAQ,QAEVwB,SAASiB,EAAIzE,MACb,MACF,IAAK,cACH+D,cACA,MACL,IAAK,YACAzC,SAASmD,EAAIzE,KAAKiE,MAClB,MACF,IAAK,YACHlD,QAAQC,IAAI,wBACZD,QAAQC,IAAIyD,EAAIzE,MAChB,IAAIkF,EAAYT,EAAIzE,KAAKmF,OACzB5D,SAASC,eAAe,eAAe4D,UAAYF,EACnD,MACF,IAAK,aACHnE,QAAQC,IAAIyD,GACZtE,WAAWsE,EAAIzE,MACf,MACF,QACEe,QAAQC,IAAIyD,EAAIzE,SA2JxB,IAAIA,MACF8D,eAAgB,GAChBuB,qBAAsB,GACtBC,iBAAkB,GAClBC,KAAMC,oBACNC,QAASC,kBACTvE,aACAwE,gBACAC,mBAAoB,GACpBC,8BACA1C,gCACAlB,sBAAuB,EACvBhB,SAAU,GACVN,WAAY,EACZH,UAAW,EACXc,SAAU,GACVjB,QAAQ,EACRE,MAAO,EACPD,SAAS,EACTR,MAAO,MAGT,SAAS0F,oBAEP,IADA,IAAIM,KACKpE,EAAI,EAAGA,EAAIpC,IAAKoC,IACvBoE,EAAU1C,KAAK1B,GAEjB,OAAOoE,EAGT,SAASJ,kBAEP,IADA,IAAID,KACK/D,EAAI,EAAGA,EAAIpC,IAAKoC,IACvB,IAAK,IAAIQ,EAAI,EAAGA,EAAI3C,OAAQ2C,IAC1BuD,EAAQrC,MAAMf,GAAI,UAAYX,EAAI,IAAMQ,EAAGoB,MAAO5B,EAAG6B,MAAOrB,EAAG6D,eAAe,EAAMC,gBAAgB,EAAOC,sBAAuB,qBAItI,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAQhC,OAAQyC,IAClC,OAAQT,EAAQS,GAAG7D,IACjB,IAAK,aAAc,IAAK,aAAc,IAAK,aAAc,IAAK,aAAc,IAAK,cAAe,IAAK,aAAc,IAAK,aAAc,IAAK,aAAc,IAAK,aAAc,IAAK,aAAc,IAAK,cAAe,IAAK,eACtNoD,EAAQS,GAAGD,sBAAwB,kBACnC,MACF,IAAK,aAAc,IAAK,cAAe,IAAK,aAAc,IAAK,aAAc,IAAK,aAAc,IAAK,aAAc,IAAK,aAAc,IAAK,aAAc,IAAK,cAAe,IAAK,aAAc,IAAK,cAAe,IAAK,cACvNR,EAAQS,GAAGD,sBAAwB,iBACnC,MACF,IAAK,aACHR,EAAQS,GAAGD,sBAAwB,gBAIzC,OAAOR,EAIT,SAASrE,cAAc+E,GACrB,IAAIhF,KACJ,GAAuC,IAAnCzB,wBAAwB+D,OAC1B,IAAK,IAAI/B,EAAI,EAAGA,EAAIyE,EAAgB1C,OAAQ/B,IAAK,CAC/C,IAAIY,EAAS6D,EAAgBzE,GACzBc,EAAYzC,KAAKyC,UAAUF,GAC/BnB,EAAUiC,MACRf,GAAI,OAASX,EACbsC,SAAS,EACTrC,MACEU,GAAK,OAASX,EACdY,OAAQA,EACRC,MAAOC,EACPC,sBAAkBC,EAClBC,WAAY,UACZlB,UAAU,KAGd/B,wBAAwB0D,KAAKd,QAG/B,IAASZ,EAAI,EAAGA,EAAIyE,EAAgB1C,OAAQ/B,IAAK,CAC3CY,EAAS6D,EAAgBzE,GACzBc,EAAYzC,KAAKyC,UAAUF,GAE/BnB,EAAUiC,MACRf,GAAI,OAASX,EACbsC,SAAS,EACTrC,MACEU,GAAK,OAAS5C,iBACd6C,OAAQA,EACRC,MAAOC,EACPC,sBAAkBC,EAClBC,WAAY,UACZlB,UAAU,KAGdhC,mBAIJ,OAAO0B,EAGT,SAASqB,UAAUb,GACjB,OAAQA,GACN,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACrD,OAAO,EACT,IAAK,IACL,IAAK,IACH,OAAO,EACT,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IACb,OAAO,EACT,IAAK,IAAK,IAAK,IACf,IAAK,IAAK,IAAK,IAAK,IAAK,IACvB,OAAO,EACT,IAAK,IACH,OAAO,EACT,IAAK,IACL,IAAK,IACH,OAAO,EACT,IAAK,IACL,IAAK,IACH,OAAO,IAIb,IAAIyE,KAAO,SAASC,GAClBA,EAAGC,aAAaC,QAAQ,OAAQF,EAAGG,OAAOnE,KAGxCoE,UAAY,SAASJ,GACvBA,EAAGK,kBAGDC,KAAO,SAASN,GAClBA,EAAGK,iBACH,IAAI1G,EAAOqG,EAAGC,aAAaM,QAAQ,QACnCP,EAAGG,OAAOpB,UAAY,GAAIiB,EAAGG,OAAOxD,YAAYzB,SAASC,eAAexB,IAExE,IACI0B,EADAmF,GAAgB,EAEpB,IAAKnF,EAAI,EAAGA,EAAI3B,KAAK+G,2BAA2BrD,OAAQ/B,IACtD,GAAI2E,EAAGG,OAAOnE,KAAOtC,KAAK+G,2BAA2BpF,GAAI,CACvDmF,GAAgB,EAChB,MAKF9G,KAAKgH,aADHF,EACmB,EAAI9G,KAAKiH,UAEVjH,KAAKiH,WAKzBC,sBAAwB,SAASC,GAInC,IAFA,IAAIvF,EAAOJ,SAASC,eAAe0F,GAE1BxF,EAAI,EAAGA,EAAIlC,eAAgBkC,IAClCyF,EAAYpH,KAAKoB,UAAUO,GAAGC,KAAKF,SAC/BE,EAAKU,KAAOtC,KAAKoB,UAAUO,GAAGC,KAAKU,IAAO8E,EAG5CpH,KAAKoB,UAAUO,GAAGC,KAAKc,iBAAmB,UAF1C1C,KAAKoB,UAAUO,GAAGC,KAAKc,iBAAmB,UAM9C,IAAK0E,EAAW,CAEd,IAAIC,EAAUzF,EAAK0F,WAAWA,WAAWA,WAIzC,GAFAtH,KAAK+D,eAAiBoD,EAEI,kBAAtBE,EAAQE,UAA+B,CACzC,IAAIH,GAAY,EAIZI,GAFA5F,EAAOJ,SAASC,eAAe0F,IAEfG,WAAWhF,GAE/BtC,KAAKsF,qBAAuBkC,EAE5BxH,KAAK4F,aAAavC,MAAM8D,OAAQA,EAAQK,SAAUA,IAClDxH,KAAK6F,mBAAqB,OACK,kBAAtBwB,EAAQE,YACjBvH,KAAK6F,mBAAqB,MAM5B4B,gBAAkB,SAASC,GAChBlG,SAASC,eAAeiG,GAErC,GAA4B,KAAxB1H,KAAK+D,eAAuB,CAE9B,IAAI4D,EAAiBnG,SAASC,eAAeiG,GAE7C,GAAgC,KAA5B1H,KAAK6F,oBAAgE,IAAnC8B,EAAeC,SAASlE,OAAc,CAE1E,IAEImE,EAFerG,SAASC,eAAezB,KAAK+D,gBAEzB+D,WAAU,GAEjCH,EAAe1E,YAAY4E,GAE3B7H,KAAK6F,mBAAqBgC,EAAIvF,GAE9B,IAAK,IAAIX,EAAI,EAAGA,EAAIlC,eAAgBkC,IAC9B3B,KAAK+D,iBAAmB/D,KAAKoB,UAAUO,GAAGC,KAAKU,KACjDtC,KAAKoB,UAAUO,GAAGsC,SAAU,EAC5BjE,KAAKoB,UAAUO,GAAGC,KAAKgB,WAAa,UAIxC,IAASjB,EAAI,EAAGA,EAAI3B,KAAK0F,QAAQhC,OAAQ/B,IACnC+F,IAAa1H,KAAK0F,QAAQ/D,GAAGW,KAC/BtC,KAAKkC,wBACLlC,KAAKoD,6BAA6BC,MAAMC,WAAY9B,SAASC,eAAezB,KAAK+D,gBAAgB6D,SAAS,GAAGvC,UAC3G9B,MAAOvD,KAAK0F,QAAQ/D,GAAG4B,MACvBC,MAAOxD,KAAK0F,QAAQ/D,GAAG6B,SAK7BxD,KAAK8F,2BAA2BzC,KAAKwE,EAAIvF,SAEzC,GAAKqF,EAAetF,gBACb,CACL,IAAI0F,EAAYJ,EAAeC,SAAS,GAExC,GAAmD,YAA/CG,EAAUH,SAAS,GAAGI,aAAa,QAAuB,CAC5DL,EAAe/D,YAAYmE,GAC3B/H,KAAK6F,mBAAqB,GAE1B,IAASlE,EAAI,EAAGA,EAAIlC,eAAgBkC,IAC9BoG,EAAUzF,KAAOtC,KAAKoB,UAAUO,GAAGC,KAAKU,KAC1CtC,KAAKoB,UAAUO,GAAGsC,SAAU,EAC5BjE,KAAKoB,UAAUO,GAAGC,KAAKgB,WAAa,UACpC5C,KAAKoB,UAAUO,GAAGC,KAAKc,iBAAmB,WAI9C1C,KAAKoD,6BAA6BU,MAClC9D,KAAKkC,wBAELlC,KAAK8F,2BAA2BhC,IAAI9D,KAAK6F,6BAO/CoC,KAAO,WACT,IAAK,IAAItG,EAAI,EAAGA,EAAI3B,KAAKkC,sBAAuBP,IAAK,CACnD,IAAIgC,EAAI3D,KAAKoD,6BAA6BpD,KAAKoD,6BAA6BM,OAAS,GACjFtB,EAASZ,SAASC,eAAe,UAAYkC,EAAEJ,MAAQ,IAAMI,EAAEH,OACnExD,KAAKoD,6BAA6BU,MAClC1B,EAAOwB,YAAYxB,EAAOyB,YAE5B7D,KAAK+D,eAAiB,GACtB,IAAK,IAAIpC,EAAI,EAAGA,EAAIlC,eAAgBkC,IAClC3B,KAAKoB,UAAUO,GAAGC,KAAKc,iBAAmB,UAG5C1C,KAAKkC,sBAAwB,EAE7B,IAAK,IAAIP,EAAI,EAAGA,EAAI3B,KAAKoB,UAAUsC,OAAQ/B,IACzC3B,KAAKoB,UAAUO,GAAGsC,SAAU,EAC5BjE,KAAKoB,UAAUO,GAAGC,KAAKgB,WAAa,UAGtChD,GAAGyE,KAAKC,KAAKC,WAAWH,MAAO,WAG7B8D,KAAO,WAET,IAAK,IAAIvG,EAAI,EAAGA,EAAI3B,KAAK8F,2BAA2BpC,OAAQ/B,IAAK,CAC/D,IAAIC,EAAOJ,SAASC,eAAezB,KAAK8F,2BAA2BnE,IACnEC,EAAKgG,SAAS,GAAG7E,aAAa,OAAQ,oBACtCnB,EAAKgG,SAAS,GAAG7E,aAAa,OAAQ,WACtCnB,EAAKgG,SAAS,GAAG7E,aAAa,OAAQ,WAExC/C,KAAK8F,8BACL9F,KAAK+D,eAAiB,GACtB/D,KAAK6F,mBAAqB,IAGxBsC,QAAU,WACZnI,KAAKoB,UAAUgH,KAAK,WAAa,MAAO,GAAMC,KAAKC,YAGrD,SAASC,YAEP,IADA,IAAIC,EAAQ,IAAIC,MAAMlJ,KACboC,EAAI,EAAGA,EAAIpC,IAAKoC,IACvB6G,EAAM7G,GAAK,IAAI8G,MAAMjJ,QAGvB,IAASmC,EAAI,EAAGA,EAAIpC,IAAKoC,IACvB,IAAK,IAAIQ,EAAI,EAAGA,EAAI3C,OAAQ2C,SACPQ,GAAf6F,EAAM7G,GAAGQ,KACXqG,EAAM7G,GAAGQ,GAAK,MAOpB,GAFAnB,QAAQC,IAAI,QAERjB,KAAKC,KAAKiC,sBAAwB,EAQpC,YAPAL,MACEC,MAAO,kCACPC,KAAM,kEACNC,KAAM,QACNC,OAAQ,QAMZ,IAAIX,EAAStB,KAAKC,KAAiC,6BACnD,IAAS0B,EAAI,EAAGA,EAAIL,EAAMoC,OAAQ/B,IAAK,CACrC,IAAI+G,EAAIpH,EAAMK,GAAG4B,MACboF,EAAIrH,EAAMK,GAAG6B,MACjBgF,EAAME,GAAGC,GAAKrH,EAAMK,GAAG2B,WAGzB,IAAIvC,GAAUqD,MAAO,WAAYnE,MAAO2I,KAAMJ,IAC9C5I,GAAGyE,KAAKC,KAAKC,UAAUxD,IAGzB,SAAS8H,eACP,IACIC,GADa,+GAAgH,qGAAsG,uFAAwF,8EAA+E,6FAA8F,0FACvdjE,IAAI,CAACkE,EAAUhE,OACxBA,EAAQ,MAAMgE,OAG1BlH,MACEC,MAAO,OACPC,QAAS+G,EAAK9D,KAAK,MACnBhD,KAAM,OACNC,OAAQ","file":"../board.min.js","sourcesContent":["var row = 11\nvar column = 11\nvar tileSlotNumber = 7\nvar currentTileCount = tileSlotNumber + 1\nvar firstTimeGeneratedTiles = []\n\n// sockets\nlet ws = new WebSocket('ws://localhost:3000')\nws.onopen = function(event) {\n  // send \"whoAmI\" event\n  let whoAmI = { event: 'whoAmI', data: { client: 'CL' } }\n  ws.send(JSON.stringify(whoAmI))\n\n  ws.onmessage = function(event) {\n    // NEW WEBSOCKETS STUFF -- UNABLE TO TEST, MAY BE POORLY IMPLEMENTED\n    let mes = JSON.parse(event.data)\n    console.log(mes.event)\n    switch (mes.event) {\n      case 'errorMessage':\n        removeForError(mes.data.error)\n        break\n      case 'gameOver':\n        let scores = mes.data.scores.map((player, index) => {\n          return `${index + 1}: ${player.name} | Score: ${player.score}\\n`\n        })\n\n        swal({\n          title: 'Game Over!',\n          text: `${scores.join('')}\n          Winning Team: ${mes.data.winningTeam}\\n\n          Winner: ${mes.data.winner}`,\n          icon: 'success',\n          button: 'Ok!'\n        })\n        gameOver(mes.data)\n        break\n      case 'invalidPlay':\n        invalidPlay()\n        break\n\t  case 'playTimer':\n        playTime(mes.data.time)\n        break\n      case 'gameEvent':\n        console.log('received gameEvent: ')\n        console.log(mes.data)\n        var gameEvent = mes.data.action\n        document.getElementById('actualEvent').innerHTML = gameEvent\n        break\n      case 'dataUpdate':\n        console.log(mes)\n        dataUpdate(mes.data)\n        break\n      default:\n        console.log(mes.data)\n    }\n  }\n}\n\nfunction removeForError(error) {\n  this.data.error = error\n  $('#removable').remove()\n}\n\n// response to dataUpdate socket event\nfunction dataUpdate(response) {\n  this.data.isTurn = response.isTurn\n  if (!response.isTurn) {\n    this.data.colored = false\n  }\n  this.data.score = response.score\n  this.data.goldScore = response.latestData.gold\n  this.data.greenScore = response.latestData.green\n\n  boardUpdate(response.latestData.board)\n\n  console.log('received dataUpdate event: ')\n  console.log(response)\n  this.data.username = response.name\n  this.data.tileSlots = generateTiles(response.tiles)\n  if (response.isTurn === false) {\n    this.data.playTime = 'Wait for your turn...'\n    document.getElementById('btnSwap').disabled = true\n    document.getElementById('btnPlace').disabled = true\n    document.getElementById('btnShuffle').disabled = true\n    for (var i = 0; i < tileSlotNumber; i++) {\n      this.data.tileSlots[i].tile.disabled = true\n    }\n  } else {\n    swal({\n      title: `It's your turn!`,\n      text: 'Go place tiles on the board!',\n      icon: 'info',\n      button: 'Ok!'\n    })\n    this.data.playTime = \"It's your turn!\"\n    document.getElementById('btnSwap').disabled = false\n    document.getElementById('btnPlace').disabled = false\n    document.getElementById('btnShuffle').disabled = false\n    for (var i = 0; i < tileSlotNumber; i++) {\n      this.data.tileSlots[i].tile.disabled = false\n    }\n  }\n}\n\n// responds to boardUpdate socket event\nfunction boardUpdate(board) {\n  this.data.currentPlayTileAmount = 0\n  for (i = 0; i < row; i++) {\n    for (j = 0; j < column; j++) {\n      var square = document.getElementById('square-' + i + '-' + j)\n      if (!square.hasChildNodes()) {\n        if (board[i][j] !== null) {\n          var tile = {\n            id: 'playedLetter: ' + board[i][j],\n            letter: board[i][j],\n            value: tileValue(board[i][j]),\n            highlightedColor: undefined,\n            visibility: 'visible'\n          }\n\n          var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n          svg.setAttribute('id', tile.id)\n          svg.setAttribute('visibility', 'visible')\n          var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\n          rect.setAttribute('x', 0)\n          rect.setAttribute('y', 0)\n          rect.setAttribute('stroke', 'black')\n          rect.setAttribute('stroke-width', '1px')\n          rect.setAttribute('width', '100%')\n          rect.setAttribute('height', '100%')\n          rect.setAttribute('fill', '#D3D3D3')\n          svg.appendChild(rect)\n          var text = document.createElementNS('http://www.w3.org/2000/svg', 'text')\n          text.setAttribute('x', '50%')\n          text.setAttribute('y', '60%')\n          text.setAttribute('alignment-baseline', 'middle')\n          text.setAttribute('text-anchor', 'middle')\n          text.setAttribute('fill', undefined)\n          text.textContent = tile.letter\n          svg.appendChild(text)\n          var text2 = document.createElementNS('http://www.w3.org/2000/svg', 'text')\n          text2.setAttribute('x', '70%')\n          text2.setAttribute('y', '30%')\n          text2.setAttribute('fill', undefined)\n          text2.setAttribute('class', 'letter-value')\n          text2.textContent = tile.value\n          svg.appendChild(text2)\n          square.appendChild(svg)\n\n          this.data.tilesOnBoardValueAndPosition.push({tileLetter: tile.letter,\n            xAxis: i,\n            yAxis: j\n          })\n        }\n      }\n    }\n  }\n}\n\nfunction gameOver(response) {\n  for (let i = this.data.tilesOnBoardValueAndPosition.length - 1; i >= 0; i--) {\n    var t = this.data.tilesOnBoardValueAndPosition[i]\n\n    var square = document.getElementById('square-' + t.xAxis + '-' + t.yAxis)\n    square.removeChild(square.firstChild)\n    this.data.tilesOnBoardValueAndPosition.pop()\n    // }\n  }\n  this.data.selectedTileId = ''\n  for (var i = 0; i < tileSlotNumber; i++) {\n    this.data.tileSlots[i].tile.highlightedColor = '#000000'\n  }\n}\n\n// response to invalidPlay socket event\nfunction invalidPlay() {\n  for (let i = 0; i < this.data.currentPlayTileAmount; i++) {\n    var t = this.data.tilesOnBoardValueAndPosition[this.data.tilesOnBoardValueAndPosition.length - 1]\n\n    if (t != undefined) {\n      var square = document.getElementById('square-' + t.xAxis + '-' + t.yAxis)\n      this.data.tilesOnBoardValueAndPosition.pop()\n      square.removeChild(square.firstChild)\n    }\n  }\n  this.data.selectedTileId = ''\n  for (var i = 0; i < tileSlotNumber; i++) {\n    this.data.tileSlots[i].tile.highlightedColor = '#000000'\n  }\n\n  this.data.currentPlayTileAmount = 0\n\n  for (let i = 0; i < this.data.tileSlots.length; i++) {\n    this.data.tileSlots[i].hasTile = true\n    this.data.tileSlots[i].tile.visibility = 'visible'\n  }\n}\n// response to playTime socket event\nfunction playTime(time) {\n  this.data.playTime = 'Play time: ' + time\n  if (time % 2 === 0) {\n    this.data.colored = true\n  } else {\n    this.data.colored = false\n  }\n}\n\n// data object\nvar data = {\n  selectedTileId: '',\n  selectedTileParentId: '',\n  selectedSquareId: '',\n  rows: generateTableRows(),\n  squares: generateSquares(),\n  tileSlots: [],\n  tilesOnBoard: [],\n  selectedTileCopyId: '',\n  currentRoundtileIdsOnBoard: [],\n  tilesOnBoardValueAndPosition: [],\n  currentPlayTileAmount: 0,\n  username: '',\n  greenScore: 0,\n  goldScore: 0,\n  playTime: '',\n  isTurn: false,\n  score: 0,\n  colored: false,\n  error: null\n}\n\nfunction generateTableRows() {\n  var tableRows = []\n  for (var i = 0; i < row; i++) {\n    tableRows.push(i)\n  }\n  return tableRows\n}\n\nfunction generateSquares() {\n  var squares = []\n  for (var i = 0; i < row; i++) {\n    for (var j = 0; j < column; j++) {\n      squares.push({id: 'square-' + i + '-' + j, xAxis: i, yAxis: j, isSquareGreen: true, isSquareYellow: false, squareBackgroundColor: 'rgb(171,171,171)'})\n    }\n  }\n\n  for (var k = 0; k < squares.length; k++) {\n    switch (squares[k].id) {\n      case 'square-0-0': case 'square-0-7': case 'square-2-4': case 'square-3-7': case 'square-3-10': case 'square-4-2': case 'square-6-8': case 'square-7-0': case 'square-7-3': case 'square-8-6': case 'square-10-3': case 'square-10-10':\n        squares[k].squareBackgroundColor = 'rgb(242,195,50)'\n        break\n      case 'square-0-3': case 'square-0-10': case 'square-2-6': case 'square-3-0': case 'square-3-3': case 'square-4-8': case 'square-6-2': case 'square-7-7': case 'square-7-10': case 'square-8-4': case 'square-10-0': case 'square-10-7':\n        squares[k].squareBackgroundColor = 'rgb(24,180,76)'\n        break\n      case 'square-5-5':\n        squares[k].squareBackgroundColor = 'rgb(84,76,76)'\n        break\n    }\n  }\n  return squares\n}\n\n// initialize slots and inside tiles\nfunction generateTiles(tilesToGenerate) {\n  var tileSlots = []\n  if (firstTimeGeneratedTiles.length === 0) {\n    for (var i = 0; i < tilesToGenerate.length; i++) {\n      var letter = tilesToGenerate[i]\n      var tileValue = this.tileValue(letter)\n      tileSlots.push({\n        id: 'slot' + i,\n        hasTile: true,\n        tile: {\n          id: ('tile' + i),\n          letter: letter,\n          value: tileValue,\n          highlightedColor: undefined,\n          visibility: 'visible',\n          disabled: false\n        }\n      })\n      firstTimeGeneratedTiles.push(letter)\n    }\n  } else {\n    for (var i = 0; i < tilesToGenerate.length; i++) {\n      var letter = tilesToGenerate[i]\n      var tileValue = this.tileValue(letter)\n\n      tileSlots.push({\n        id: 'slot' + i,\n        hasTile: true,\n        tile: {\n          id: ('tile' + currentTileCount),\n          letter: letter,\n          value: tileValue,\n          highlightedColor: undefined,\n          visibility: 'visible',\n          disabled: false\n        }\n      })\n      currentTileCount++\n    }\n  }\n\n  return tileSlots\n}\n\nfunction tileValue(tile) {\n  switch (tile) {\n    case 'A': case 'E': case 'I': case 'O':\n    case 'U': case 'L': case 'N': case 'S': case 'T': case 'R':\n      return 1\n    case 'D':\n    case 'G':\n      return 2\n    case 'B': case 'C':\n    case 'M': case 'P':\n      return 3\n    case 'F': case 'H':\n    case 'V': case 'W': case 'Y':\n      return 4\n    case 'K':\n      return 5\n    case 'J':\n    case 'X':\n      return 8\n    case 'Q':\n    case 'Z':\n      return 10\n  }\n}\n\nvar drag = function(ev) {\n  ev.dataTransfer.setData('text', ev.target.id)\n}\n\nvar allowDrop = function(ev) {\n  ev.preventDefault()\n}\n\nvar drop = function(ev) {\n  ev.preventDefault()\n  var data = ev.dataTransfer.getData('text')\n  ev.target.innerHTML = ''; ev.target.appendChild(document.getElementById(data))\n\n  var isDoubleScore = false\n  var i\n  for (i = 0; i < this.doubleScoreGameBoardBlocks.length; i++) {\n    if (ev.target.id === this.doubleScoreGameBoardBlocks[i]) {\n      isDoubleScore = true\n      break\n    }\n  }\n\n  if (isDoubleScore) {\n    this.accumulator += (2 * this.scoreUnit)\n  } else {\n    this.accumulator += this.scoreUnit\n  }\n}\n\n// when clicking on a tile in a tile slot or in the game board\nvar selectAndDeselectTile = function(tileId) {\n  // get the tile\n  var tile = document.getElementById(tileId)\n  // set tile border color\n  for (var i = 0; i < tileSlotNumber; i++) {\n    isDisable = this.tileSlots[i].tile.disabled\n    if (tile.id === this.tileSlots[i].tile.id && !isDisable) {\n      this.tileSlots[i].tile.highlightedColor = '#d61515'\n    } else {\n      this.tileSlots[i].tile.highlightedColor = '#000000'\n    }\n  }\n\n  if (!isDisable) {\n    // get tile parent\n    var wrapper = tile.parentNode.parentNode.parentNode\n    // record Tile ID\n    this.selectedTileId = tileId\n    // select tile if it is in a slot\n    if (wrapper.className === 'wrapper-slots') {\n      var isDisable = false\n      // get tile\n      var tile = document.getElementById(tileId)\n      // get tile's parent ID\n      var parentId = tile.parentNode.id\n      // record parent ID\n      this.selectedTileParentId = parentId\n      // record both tile and parent ID\n      this.tilesOnBoard.push({tileId: tileId, parentId: parentId})\n      this.selectedTileCopyId = ''\n    } else if (wrapper.className === 'wrapper-board') {\n      this.selectedTileCopyId = ''\n    }\n  }\n}\n\n// when clicking a square on the game board\nvar putTileInSquare = function(squareId) {\n  var square = document.getElementById(squareId)\n  // if a tile in a slot has been clicked\n  if (this.selectedTileId !== '') {\n    // get the square\n    var selectedSquare = document.getElementById(squareId)\n\n    if (this.selectedTileCopyId === '' && selectedSquare.children.length === 0) {\n      // get the tile\n      var selectedTile = document.getElementById(this.selectedTileId)\n      // copy the tile\n      var cln = selectedTile.cloneNode(true)\n      // put the clone tile on the game board\n      selectedSquare.appendChild(cln)\n      //\n      this.selectedTileCopyId = cln.id\n      // update slot information\n      for (var i = 0; i < tileSlotNumber; i++) {\n        if (this.selectedTileId === this.tileSlots[i].tile.id) {\n          this.tileSlots[i].hasTile = false\n          this.tileSlots[i].tile.visibility = 'hidden'\n        }\n      }\n\n      for (var i = 0; i < this.squares.length; i++) {\n        if (squareId === this.squares[i].id) {\n          this.currentPlayTileAmount++\n          this.tilesOnBoardValueAndPosition.push({tileLetter: document.getElementById(this.selectedTileId).children[1].innerHTML,\n            xAxis: this.squares[i].xAxis,\n            yAxis: this.squares[i].yAxis\n          })\n        }\n      }\n\n      this.currentRoundtileIdsOnBoard.push(cln.id)\n    } else { // move around or distroy\n      if (!selectedSquare.hasChildNodes()) {\n      } else {\n        var childTile = selectedSquare.children[0]\n        // only current round tiles can be put back\n        if (childTile.children[0].getAttribute('fill') !== '#D3D3D3') {\n          selectedSquare.removeChild(childTile)\n          this.selectedTileCopyId = ''\n          // update slot information\n          for (var i = 0; i < tileSlotNumber; i++) {\n            if (childTile.id === this.tileSlots[i].tile.id) {\n              this.tileSlots[i].hasTile = true\n              this.tileSlots[i].tile.visibility = 'visible'\n              this.tileSlots[i].tile.highlightedColor = '#000000'\n            }\n          }\n\n          this.tilesOnBoardValueAndPosition.pop()\n          this.currentPlayTileAmount--\n          // remove tile id in the current round\n          this.currentRoundtileIdsOnBoard.pop(this.selectedTileCopyId)\n        }\n      }\n    }\n  }\n}\n\nvar swap = function() {\n  for (let i = 0; i < this.currentPlayTileAmount; i++) {\n    var t = this.tilesOnBoardValueAndPosition[this.tilesOnBoardValueAndPosition.length - 1]\n    var square = document.getElementById('square-' + t.xAxis + '-' + t.yAxis)\n    this.tilesOnBoardValueAndPosition.pop()\n    square.removeChild(square.firstChild)\n  }\n  this.selectedTileId = ''\n  for (var i = 0; i < tileSlotNumber; i++) {\n    this.tileSlots[i].tile.highlightedColor = '#000000'\n  }\n\n  this.currentPlayTileAmount = 0\n\n  for (let i = 0; i < this.tileSlots.length; i++) {\n    this.tileSlots[i].hasTile = true\n    this.tileSlots[i].tile.visibility = 'visible'\n  }\n\n  ws.send(JSON.stringify({event: 'swap'}))\n}\n\nvar grey = function() {\n  // change color of tiles on board\n  for (var i = 0; i < this.currentRoundtileIdsOnBoard.length; i++) {\n    var tile = document.getElementById(this.currentRoundtileIdsOnBoard[i])\n    tile.children[0].setAttribute('fill', 'rgb(212,212,212)')\n    tile.children[1].setAttribute('fill', '#000000')\n    tile.children[2].setAttribute('fill', '#000000')\n  }\n  this.currentRoundtileIdsOnBoard = []\n  this.selectedTileId = ''\n  this.selectedTileCopyId = ''\n}\n\nvar shuffle = function() {\n  this.tileSlots.sort(function() { return 0.5 - Math.random() })\n}\n\nfunction emitBoard() {\n  var array = new Array(row)\n  for (var i = 0; i < row; i++) {\n    array[i] = new Array(column)\n  }\n\n  for (var i = 0; i < row; i++) {\n    for (var j = 0; j < column; j++) {\n      if (array[i][j] == undefined) {\n        array[i][j] = null\n      }\n    }\n  }\n\n  console.log('here')\n\n  if (this.data.currentPlayTileAmount < 1) {\n    swal({\n      title: 'You must attempt to make a play',\n      text: 'Tiles must be placed on the board before you can submit a play.',\n      icon: 'error',\n      button: 'Ok!'\n    })\n\n    return\n  }\n\n  var tiles = (this.data.tilesOnBoardValueAndPosition)\n  for (var i = 0; i < tiles.length; i++) {\n    var x = tiles[i].xAxis\n    var y = tiles[i].yAxis\n    array[x][y] = tiles[i].tileLetter\n  }\n\n  let board = { event: 'playWord', data: {play: array} }\n  ws.send(JSON.stringify(board))\n}\n\nfunction helpFunction() {\n  let sentences = [`To play a tile on the board, 'Tap' the tile in your hand and then 'Tap' the board where you want to play it.`, `The EXCHANGE button will replace your tiles with a new hand and move on to the next player's turn.`, `The SHUFFLE button will shuffle the tiles in your hand, but will not skip your turn.`, `The DONE button is how you place a word on the board to complete your turn.`, `You will have one minute to play a word or EXCHANGE your hand before your turn is skipped.`, `The GAME EVENT box will flash red when it is your turn and the timer is counting down.`]\n  let help = sentences.map((sentence, index) => {\n    return `${index + 1}: ${sentence}\\n`\n  })\n\n  swal({\n    title: 'Help',\n    text: `${help.join('')}`,\n    icon: 'info',\n    button: 'Ok!'\n  })\n}\n"]}