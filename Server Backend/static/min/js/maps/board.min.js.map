{"version":3,"sources":["board.js"],"names":["row","column","tileSlotNumber","currentTileCount","firstTimeGeneratedTiles","ws","WebSocket","removeForError","error","this","data","$","remove","dataUpdate","response","isTurn","colored","score","goldScore","latestData","gold","greenScore","green","boardUpdate","board","console","log","username","name","tileSlots","generateTiles","tiles","playTime","document","getElementById","disabled","i","tile","currentPlayTileAmount","j","square","hasChildNodes","id","letter","value","tileValue","highlightedColor","undefined","visibility","svg","createElementNS","setAttribute","rect","appendChild","text","textContent","text2","tilesOnBoardValueAndPosition","push","tileLetter","xAxis","yAxis","gameOver","length","t","removeChild","firstChild","pop","selectedTileId","invalidPlay","hasTile","time","onopen","event","send","JSON","stringify","client","onmessage","mes","parse","scores","map","player","index","swal","title","join","winningTeam","winner","icon","button","gameEvent","action","innerHTML","selectedTileParentId","selectedSquareId","rows","generateTableRows","squares","generateSquares","tilesOnBoard","selectedTileCopyId","currentRoundtileIdsOnBoard","tableRows","isSquareGreen","isSquareYellow","squareBackgroundColor","k","tilesToGenerate","drag","ev","dataTransfer","setData","target","allowDrop","preventDefault","drop","getData","isDoubleScore","doubleScoreGameBoardBlocks","accumulator","scoreUnit","selectAndDeselectTile","tileId","isDisable","wrapper","parentNode","className","parentId","putTileInSquare","squareId","selectedSquare","children","cln","cloneNode","childTile","getAttribute","swap","grey","shuffle","sort","Math","random","emitBoard","array","Array","x","y","play","helpFunction","help","sentence"],"mappings":"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","file":"../board.min.js","sourcesContent":["var row = 11\nvar column = 11\nvar tileSlotNumber = 7\nvar currentTileCount = tileSlotNumber + 1\nvar firstTimeGeneratedTiles = []\n\n// sockets\nlet ws = new WebSocket('ws://localhost:3000')\nws.onopen = function(event) {\n  // send \"whoAmI\" event\n  let whoAmI = { event: 'whoAmI', data: { client: 'CL' } }\n  ws.send(JSON.stringify(whoAmI))\n\n  ws.onmessage = function(event) {\n    // NEW WEBSOCKETS STUFF -- UNABLE TO TEST, MAY BE POORLY IMPLEMENTED\n    let mes = JSON.parse(event.data)\n    console.log(mes.event)\n    switch (mes.event) {\n      case 'errorMessage':\n        removeForError(mes.data.error)\n        break\n      case 'gameOver':\n        let scores = mes.data.scores.map((player, index) => {\n          return `${index + 1}: ${player.name} | Score: ${player.score}\\n`\n        })\n\n        swal({\n          title: 'Game Over!',\n          text: `${scores.join('')}\n          Winning Team: ${mes.data.winningTeam}\\n\n          Winner: ${mes.data.winner}`,\n          icon: 'success',\n          button: 'Ok!'\n        })\n        gameOver(mes.data)\n        break\n      case 'invalidPlay':\n        invalidPlay()\n        break\n\t  case 'playTimer':\n        playTime(mes.data.time)\n        break\n      case 'gameEvent':\n        console.log('received gameEvent: ')\n        console.log(mes.data)\n        var gameEvent = mes.data.action\n        document.getElementById('actualEvent').innerHTML = gameEvent\n        break\n      case 'dataUpdate':\n        console.log(mes)\n        dataUpdate(mes.data)\n        break\n      default:\n        console.log(mes.data)\n    }\n  }\n}\n\nfunction removeForError(error) {\n  this.data.error = error\n  $('#removable').remove()\n}\n\n// response to dataUpdate socket event\nfunction dataUpdate(response) {\n  this.data.isTurn = response.isTurn\n  if (!response.isTurn) {\n    this.data.colored = false\n  }\n  this.data.score = response.score\n  this.data.goldScore = response.latestData.gold\n  this.data.greenScore = response.latestData.green\n\n  boardUpdate(response.latestData.board)\n\n  console.log('received dataUpdate event: ')\n  console.log(response)\n  this.data.username = response.name\n  this.data.tileSlots = generateTiles(response.tiles)\n  if (response.isTurn === false) {\n    this.data.playTime = 'Wait for your turn...'\n    document.getElementById('btnSwap').disabled = true\n    document.getElementById('btnPlace').disabled = true\n    document.getElementById('btnShuffle').disabled = true\n    for (var i = 0; i < tileSlotNumber; i++) {\n      this.data.tileSlots[i].tile.disabled = true\n    }\n  } else {\n    this.data.playTime = \"It's your turn!\"\n    document.getElementById('btnSwap').disabled = false\n    document.getElementById('btnPlace').disabled = false\n    document.getElementById('btnShuffle').disabled = false\n    for (var i = 0; i < tileSlotNumber; i++) {\n      this.data.tileSlots[i].tile.disabled = false\n    }\n  }\n}\n\n// responds to boardUpdate socket event\nfunction boardUpdate(board) {\n  this.data.currentPlayTileAmount = 0\n  for (i = 0; i < row; i++) {\n    for (j = 0; j < column; j++) {\n      var square = document.getElementById('square-' + i + '-' + j)\n      if (!square.hasChildNodes()) {\n        if (board[i][j] !== null) {\n          var tile = {\n            id: 'playedLetter: ' + board[i][j],\n            letter: board[i][j],\n            value: tileValue(board[i][j]),\n            highlightedColor: undefined,\n            visibility: 'visible'\n          }\n\n          var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n          svg.setAttribute('id', tile.id)\n          svg.setAttribute('visibility', 'visible')\n          var rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect')\n          rect.setAttribute('x', 0)\n          rect.setAttribute('y', 0)\n          rect.setAttribute('stroke', 'black')\n          rect.setAttribute('stroke-width', '1px')\n          rect.setAttribute('width', '100%')\n          rect.setAttribute('height', '100%')\n          rect.setAttribute('fill', '#D3D3D3')\n          svg.appendChild(rect)\n          var text = document.createElementNS('http://www.w3.org/2000/svg', 'text')\n          text.setAttribute('x', '50%')\n          text.setAttribute('y', '60%')\n          text.setAttribute('alignment-baseline', 'middle')\n          text.setAttribute('text-anchor', 'middle')\n          text.setAttribute('fill', undefined)\n          text.textContent = tile.letter\n          svg.appendChild(text)\n          var text2 = document.createElementNS('http://www.w3.org/2000/svg', 'text')\n          text2.setAttribute('x', '70%')\n          text2.setAttribute('y', '30%')\n          text2.setAttribute('fill', undefined)\n          text2.setAttribute('class', 'letter-value')\n          text2.textContent = tile.value\n          svg.appendChild(text2)\n          square.appendChild(svg)\n\n          this.data.tilesOnBoardValueAndPosition.push({tileLetter: tile.letter,\n            xAxis: i,\n            yAxis: j\n          })\n        }\n      }\n    }\n  }\n}\n\nfunction gameOver(response) {\n  for (let i = this.data.tilesOnBoardValueAndPosition.length - 1; i >= 0; i--) {\n    var t = this.data.tilesOnBoardValueAndPosition[i]\n\n    var square = document.getElementById('square-' + t.xAxis + '-' + t.yAxis)\n    square.removeChild(square.firstChild)\n    this.data.tilesOnBoardValueAndPosition.pop()\n    // }\n  }\n  this.data.selectedTileId = ''\n  for (var i = 0; i < tileSlotNumber; i++) {\n    this.data.tileSlots[i].tile.highlightedColor = '#000000'\n  }\n}\n\n// response to invalidPlay socket event\nfunction invalidPlay() {\n  for (let i = 0; i < this.data.currentPlayTileAmount; i++) {\n    var t = this.data.tilesOnBoardValueAndPosition[this.data.tilesOnBoardValueAndPosition.length - 1]\n\n    if (t != undefined) {\n      var square = document.getElementById('square-' + t.xAxis + '-' + t.yAxis)\n      this.data.tilesOnBoardValueAndPosition.pop()\n      square.removeChild(square.firstChild)\n    }\n  }\n  this.data.selectedTileId = ''\n  for (var i = 0; i < tileSlotNumber; i++) {\n    this.data.tileSlots[i].tile.highlightedColor = '#000000'\n  }\n\n  this.data.currentPlayTileAmount = 0\n\n  for (let i = 0; i < this.data.tileSlots.length; i++) {\n    this.data.tileSlots[i].hasTile = true\n    this.data.tileSlots[i].tile.visibility = 'visible'\n  }\n}\n// response to playTime socket event\nfunction playTime(time) {\n  this.data.playTime = 'Play time: ' + time\n  if (time % 2 === 0) {\n    this.data.colored = true\n  } else {\n    this.data.colored = false\n  }\n}\n\n// data object\nvar data = {\n  selectedTileId: '',\n  selectedTileParentId: '',\n  selectedSquareId: '',\n  rows: generateTableRows(),\n  squares: generateSquares(),\n  tileSlots: [],\n  tilesOnBoard: [],\n  selectedTileCopyId: '',\n  currentRoundtileIdsOnBoard: [],\n  tilesOnBoardValueAndPosition: [],\n  currentPlayTileAmount: 0,\n  username: '',\n  greenScore: 0,\n  goldScore: 0,\n  playTime: '',\n  isTurn: false,\n  score: 0,\n  colored: false,\n  error: null\n}\n\nfunction generateTableRows() {\n  var tableRows = []\n  for (var i = 0; i < row; i++) {\n    tableRows.push(i)\n  }\n  return tableRows\n}\n\nfunction generateSquares() {\n  var squares = []\n  for (var i = 0; i < row; i++) {\n    for (var j = 0; j < column; j++) {\n      squares.push({id: 'square-' + i + '-' + j, xAxis: i, yAxis: j, isSquareGreen: true, isSquareYellow: false, squareBackgroundColor: 'rgb(171,171,171)'})\n    }\n  }\n\n  for (var k = 0; k < squares.length; k++) {\n    switch (squares[k].id) {\n      case 'square-0-0': case 'square-0-7': case 'square-2-4': case 'square-3-7': case 'square-3-10': case 'square-4-2': case 'square-6-8': case 'square-7-0': case 'square-7-3': case 'square-8-6': case 'square-10-3': case 'square-10-10':\n        squares[k].squareBackgroundColor = 'rgb(242,195,50)'\n        break\n      case 'square-0-3': case 'square-0-10': case 'square-2-6': case 'square-3-0': case 'square-3-3': case 'square-4-8': case 'square-6-2': case 'square-7-7': case 'square-7-10': case 'square-8-4': case 'square-10-0': case 'square-10-7':\n        squares[k].squareBackgroundColor = 'rgb(24,180,76)'\n        break\n      case 'square-5-5':\n        squares[k].squareBackgroundColor = 'rgb(84,76,76)'\n        break\n    }\n  }\n  return squares\n}\n\n// initialize slots and inside tiles\nfunction generateTiles(tilesToGenerate) {\n  var tileSlots = []\n  if (firstTimeGeneratedTiles.length === 0) {\n    for (var i = 0; i < tilesToGenerate.length; i++) {\n      var letter = tilesToGenerate[i]\n      var tileValue = this.tileValue(letter)\n      tileSlots.push({\n        id: 'slot' + i,\n        hasTile: true,\n        tile: {\n          id: ('tile' + i),\n          letter: letter,\n          value: tileValue,\n          highlightedColor: undefined,\n          visibility: 'visible',\n          disabled: false\n        }\n      })\n      firstTimeGeneratedTiles.push(letter)\n    }\n  } else {\n    for (var i = 0; i < tilesToGenerate.length; i++) {\n      var letter = tilesToGenerate[i]\n      var tileValue = this.tileValue(letter)\n\n      tileSlots.push({\n        id: 'slot' + i,\n        hasTile: true,\n        tile: {\n          id: ('tile' + currentTileCount),\n          letter: letter,\n          value: tileValue,\n          highlightedColor: undefined,\n          visibility: 'visible',\n          disabled: false\n        }\n      })\n      currentTileCount++\n    }\n  }\n\n  return tileSlots\n}\n\nfunction tileValue(tile) {\n  switch (tile) {\n    case 'A': case 'E': case 'I': case 'O':\n    case 'U': case 'L': case 'N': case 'S': case 'T': case 'R':\n      return 1\n    case 'D':\n    case 'G':\n      return 2\n    case 'B': case 'C':\n    case 'M': case 'P':\n      return 3\n    case 'F': case 'H':\n    case 'V': case 'W': case 'Y':\n      return 4\n    case 'K':\n      return 5\n    case 'J':\n    case 'X':\n      return 8\n    case 'Q':\n    case 'Z':\n      return 10\n  }\n}\n\nvar drag = function(ev) {\n  ev.dataTransfer.setData('text', ev.target.id)\n}\n\nvar allowDrop = function(ev) {\n  ev.preventDefault()\n}\n\nvar drop = function(ev) {\n  ev.preventDefault()\n  var data = ev.dataTransfer.getData('text')\n  ev.target.innerHTML = ''; ev.target.appendChild(document.getElementById(data))\n\n  var isDoubleScore = false\n  var i\n  for (i = 0; i < this.doubleScoreGameBoardBlocks.length; i++) {\n    if (ev.target.id === this.doubleScoreGameBoardBlocks[i]) {\n      isDoubleScore = true\n      break\n    }\n  }\n\n  if (isDoubleScore) {\n    this.accumulator += (2 * this.scoreUnit)\n  } else {\n    this.accumulator += this.scoreUnit\n  }\n}\n\n// when clicking on a tile in a tile slot or in the game board\nvar selectAndDeselectTile = function(tileId) {\n  // get the tile\n  var tile = document.getElementById(tileId)\n  // set tile border color\n  for (var i = 0; i < tileSlotNumber; i++) {\n    isDisable = this.tileSlots[i].tile.disabled\n    if (tile.id === this.tileSlots[i].tile.id && !isDisable) {\n      this.tileSlots[i].tile.highlightedColor = '#d61515'\n    } else {\n      this.tileSlots[i].tile.highlightedColor = '#000000'\n    }\n  }\n\n  if (!isDisable) {\n    // get tile parent\n    var wrapper = tile.parentNode.parentNode.parentNode\n    // record Tile ID\n    this.selectedTileId = tileId\n    // select tile if it is in a slot\n    if (wrapper.className === 'wrapper-slots') {\n      var isDisable = false\n      // get tile\n      var tile = document.getElementById(tileId)\n      // get tile's parent ID\n      var parentId = tile.parentNode.id\n      // record parent ID\n      this.selectedTileParentId = parentId\n      // record both tile and parent ID\n      this.tilesOnBoard.push({tileId: tileId, parentId: parentId})\n      this.selectedTileCopyId = ''\n    } else if (wrapper.className === 'wrapper-board') {\n      this.selectedTileCopyId = ''\n    }\n  }\n}\n\n// when clicking a square on the game board\nvar putTileInSquare = function(squareId) {\n  var square = document.getElementById(squareId)\n  // if a tile in a slot has been clicked\n  if (this.selectedTileId !== '') {\n    // get the square\n    var selectedSquare = document.getElementById(squareId)\n\n    if (this.selectedTileCopyId === '' && selectedSquare.children.length === 0) {\n      // get the tile\n      var selectedTile = document.getElementById(this.selectedTileId)\n      // copy the tile\n      var cln = selectedTile.cloneNode(true)\n      // put the clone tile on the game board\n      selectedSquare.appendChild(cln)\n      //\n      this.selectedTileCopyId = cln.id\n      // update slot information\n      for (var i = 0; i < tileSlotNumber; i++) {\n        if (this.selectedTileId === this.tileSlots[i].tile.id) {\n          this.tileSlots[i].hasTile = false\n          this.tileSlots[i].tile.visibility = 'hidden'\n        }\n      }\n\n      for (var i = 0; i < this.squares.length; i++) {\n        if (squareId === this.squares[i].id) {\n          this.currentPlayTileAmount++\n          this.tilesOnBoardValueAndPosition.push({tileLetter: document.getElementById(this.selectedTileId).children[1].innerHTML,\n            xAxis: this.squares[i].xAxis,\n            yAxis: this.squares[i].yAxis\n          })\n        }\n      }\n\n      this.currentRoundtileIdsOnBoard.push(cln.id)\n    } else { // move around or distroy\n      if (!selectedSquare.hasChildNodes()) {\n      } else {\n        var childTile = selectedSquare.children[0]\n        // only current round tiles can be put back\n        if (childTile.children[0].getAttribute('fill') !== '#D3D3D3') {\n          selectedSquare.removeChild(childTile)\n          this.selectedTileCopyId = ''\n          // update slot information\n          for (var i = 0; i < tileSlotNumber; i++) {\n            if (childTile.id === this.tileSlots[i].tile.id) {\n              this.tileSlots[i].hasTile = true\n              this.tileSlots[i].tile.visibility = 'visible'\n              this.tileSlots[i].tile.highlightedColor = '#000000'\n            }\n          }\n\n          this.tilesOnBoardValueAndPosition.pop()\n          this.currentPlayTileAmount--\n          // remove tile id in the current round\n          this.currentRoundtileIdsOnBoard.pop(this.selectedTileCopyId)\n        }\n      }\n    }\n  }\n}\n\nvar swap = function() {\n  for (let i = 0; i < this.currentPlayTileAmount; i++) {\n    var t = this.tilesOnBoardValueAndPosition[this.tilesOnBoardValueAndPosition.length - 1]\n    var square = document.getElementById('square-' + t.xAxis + '-' + t.yAxis)\n    this.tilesOnBoardValueAndPosition.pop()\n    square.removeChild(square.firstChild)\n  }\n  this.selectedTileId = ''\n  for (var i = 0; i < tileSlotNumber; i++) {\n    this.tileSlots[i].tile.highlightedColor = '#000000'\n  }\n\n  this.currentPlayTileAmount = 0\n\n  for (let i = 0; i < this.tileSlots.length; i++) {\n    this.tileSlots[i].hasTile = true\n    this.tileSlots[i].tile.visibility = 'visible'\n  }\n\n  ws.send(JSON.stringify({event: 'swap'}))\n}\n\nvar grey = function() {\n  // change color of tiles on board\n  for (var i = 0; i < this.currentRoundtileIdsOnBoard.length; i++) {\n    var tile = document.getElementById(this.currentRoundtileIdsOnBoard[i])\n    tile.children[0].setAttribute('fill', 'rgb(212,212,212)')\n    tile.children[1].setAttribute('fill', '#000000')\n    tile.children[2].setAttribute('fill', '#000000')\n  }\n  this.currentRoundtileIdsOnBoard = []\n  this.selectedTileId = ''\n  this.selectedTileCopyId = ''\n}\n\nvar shuffle = function() {\n  this.tileSlots.sort(function() { return 0.5 - Math.random() })\n}\n\nfunction emitBoard() {\n  var array = new Array(row)\n  for (var i = 0; i < row; i++) {\n    array[i] = new Array(column)\n  }\n\n  for (var i = 0; i < row; i++) {\n    for (var j = 0; j < column; j++) {\n      if (array[i][j] == undefined) {\n        array[i][j] = null\n      }\n    }\n  }\n\n  var tiles = (this.data.tilesOnBoardValueAndPosition)\n  for (var i = 0; i < tiles.length; i++) {\n    var x = tiles[i].xAxis\n    var y = tiles[i].yAxis\n    array[x][y] = tiles[i].tileLetter\n  }\n\n  let board = { event: 'playWord', data: {play: array} }\n  ws.send(JSON.stringify(board))\n}\n\nfunction helpFunction() {\n  let sentences = [`To play a tile on the board, 'Tap' the tile in your hand and then 'Tap' the board where you want to play it.`, `The EXCHANGE button will replace your tiles with a new hand and move on to the next player's turn.`, `The SHUFFLE button will shuffle the tiles in your hand, but will not skip your turn.`, `The DONE button is how you place a word on the board to complete your turn.`, `You will have one minute to play a word or EXCHANGE your hand before your turn is skipped.`, `The GAME EVENT box will flash red when it is your turn and the timer is counting down.`]\n  let help = sentences.map((sentence, index) => {\n    return `${index + 1}: ${sentence}\\n`\n  })\n\n  swal({\n    title: 'Help',\n    text: `${help.join('')}`,\n    icon: 'info',\n    button: 'Ok!'\n  })\n}\n"]}